openapi: '3.0.3'
info:
    title: 'Carpooling'
    version: '0.2.8'
paths:
    /user/authe:
        get:
            summary: 'Get auth status'
            description: 'Returns information about authentication status'
            responses:
                '200':
                    description: 'Information about authentication status'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/AuthInfo'
    /user/{id}:
        get:
            summary: 'Get a user'
            description: 'Get a user by their user id'
            tags:
                - user
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      $ref: 'definitions.yaml#/components/schemas/Id'
                  description: 'The user ID'
            responses:
                '200':
                    description: 'Returns the user'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/User'
                '400':
                    description: 'No id provided'
                '401':
                    description: 'Unauthenticated'
                '404':
                    description: 'User not found'

    /user/email/{email}:
        get:
            summary: 'Get a user by email'
            description: 'Get a user by their email'
            tags:
                - user
            parameters:
                - in: path
                  name: email
                  required: true
                  schema:
                      type: string
                  description: 'The user email'
            responses:
                '200':
                    description: 'Returns the user'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/User'
                '400':
                    description: 'No email provided'
                '401':
                    description: 'Unauthenticated'
                '404':
                    description: 'User not found'
    /user:
        patch:
            summary: 'Update a user'
            description: 'Update a user with new data, omitted fields are unchanged.'
            tags:
                - user
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      $ref: 'definitions.yaml#/components/schemas/Id'
                  description: 'The user ID'
            requestBody:
                description: 'The updated user object'
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'New email of the user'
                                friends:
                                    type: array
                                    description: 'New friend list of user'
                                    items:
                                        $ref: 'definitions.yaml#/components/schemas/Id'
                                avatar:
                                    type: string
                                    description: 'New avatar image of user'
            responses:
                '200':
                    description: 'Returns the updated user'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/User'
                '401':
                    description: 'Unauthenticated'
                '404':
                    description: 'User not found'

        post:
            summary: 'Create a user'
            description: 'Create a user from the provided data and firebase auth token'
            tags:
                - user
            requestBody:
                description: 'User details'
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstName:
                                    type: string
                                    description: 'First name of the user'
                                lastName:
                                    type: string
                                    description: 'Last name of the user'
                                dateOfBirth:
                                    type: number
                                    description: 'Date of birth of the user'
                                avatar:
                                    type: string
                                    description: 'User avatar image'
                            required:
                                - firstName
                                - lastName
                                - dateOfBirth
            responses:
                '200':
                    description: 'Returns the newly created user'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/User'
                '401':
                    description: 'Unauthenticated'
                '409':
                    description: 'User already exists'
    /user/list:
        get:
            summary: 'Get a user'
            description: 'Get a user by their user id'
            tags:
                - user
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      $ref: 'definitions.yaml#/components/schemas/Id'
                  description: 'The user ID'
            responses:
                '200':
                    description: 'A list of every registered user'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        fullname:
                                            type: string
                                        email:
                                            type: string
                                    required:
                                        - fullname
                                        - email
                '401':
                    description: 'Unauthenticated'
    /events/{id}:
        get:
            summary: 'Get event by id'
            description: 'Get a specific event by its id'
            tags:
                - event
            parameters:
                - in: path
                  name: id
                  schema:
                      $ref: 'definitions.yaml#/components/schemas/Id'
                  required: true
                  description: 'Id of the event to get'
            responses:
                '200':
                    description: 'Returns the event'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/Event'
                '401':
                    description: 'Unauthenticated'
                '404':
                    description: 'Event not found'

        patch:
            summary: 'Update an event'
            description: 'Update an existing event.'
            tags:
                - event
            parameters:
                - in: path
                  name: id
                  schema:
                      $ref: 'definitions.yaml#/components/schemas/Id'
                  required: true
                  description: 'Id of the event to get'
            requestBody:
                description: |
                    Fields to modify, non-existant fields lead to no change.
                    At least one field has to be provided.
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: 'Title of the event'
                                description:
                                    type: string
                                    description: 'Description of the event'
                                startDateTime:
                                    type: integer
                                    format: int32
                                    description: 'Unix timestamp when the event starts'
                                endDateTime:
                                    type: integer
                                    format: int32
                                    description: 'Unix timestamp when the event ends'
                                members:
                                    type: string
                                    items:
                                        $ref: 'definitions.yaml#/components/schemas/Id'
                                    description: 'List of event members'
            responses:
                '200':
                    description: 'Returns the updated event'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/Event'
                '400':
                    description: 'Invalid body'
                '401':
                    description: 'Body is empty'

    /events/{id}/self:
        patch:
            summary: 'Update own member'
            description: 'Update your own member object in an event.'
            tags:
                - event
            parameters:
                - in: path
                  name: id
                  schema:
                      $ref: 'definitions.yaml#/components/schemas/Id'
                  required: true
                  description: 'Id of the event to get'
            requestBody:
                description: |
                    Fields to modify, non-existant fields lead to no change.
                    At least one field has to be provided.
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                location:
                                    $ref: 'definitions.yaml#/components/schemas/Location'
                                    description: 'Your location from where you want to be picked up for this event.'
                                requiresCarpooling:
                                    type: boolean
                                    description: 'If you require carpooling.'
            responses:
                '200':
                    description: 'Returns the updated event member user'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/EventMember'
                '400':
                    description: 'Invalid body'
                '401':
                    description: 'Body is empty'
                '404':
                    description: 'Event not found, or not part of this event'
        delete:
            summary: 'Remove yourself from event'
            description: 'Remove yourself from an event.'
            tags:
                - event
            parameters:
                - in: path
                  name: id
                  schema:
                    $ref: 'definitions.yaml#/components/schemas/Id'
                  required: true
                  description: 'Id of the event to remove user from'
                - in: header
                  name: Authorization
                  schema:
                    type: string
                  required: true
            responses:
                '200':
                    description: 'User is removed from event'
                '401':
                    description: 'Unauthorized, or not part of event'
                '404':
                    description: 'Event not found'

    /events:
        get:
            summary: 'List own events'
            description: 'List all events the current user is a owner or member of.'
            tags:
                - event
            responses:
                '200':
                    description: 'List of events'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: 'definitions.yaml#/components/schemas/Event'
        post:
            summary: 'Create an event'
            description: 'Create a new event by a signed in user.'
            tags:
                - event
            requestBody:
                description: 'The event object'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: 'definitions.yaml#/components/schemas/EventCreationParameters'
            responses:
                '200':
                    description: 'Returns the event id'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/Event'
                                description: 'The newly created event'
                '400':
                    description: 'Invalid body'
                '401':
                    description: 'Unauthenticated'
                '404':
                    description: 'Event not found'
    /geo/forward/{place}:
        get:
            summary: 'Forward Geocoding'
            description: 'Get geo data by place name'
            tags:
                - geo
            parameters:
                - in: path
                  name: place
                  schema:
                      type: string
                  required: true
                  description: 'Name of the place to get info about'
            responses:
                '200':
                    description: 'Returns the geodata'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/GeoData'
                '400':
                    description: 'Bad Request'
                '401':
                    description: 'Unauthenticated'
                '404':
                    description: 'Place found'
    /geo/reverse:
        get:
            summary: 'Reverse Geocoding'
            description: 'Get address from coordinates'
            tags:
                - geo
            parameters:
                - in: query
                  name: lng
                  schema:
                      type: number
                  required: true
                  description: 'Longitude of place to get address of'
                - in: query
                  name: lat
                  schema:
                      type: number
                  required: true
                  description: 'Latitude of place to get address of'
            responses:
                '200':
                    description: 'Returns the geodata'
                    content:
                        application/json:
                            schema:
                                $ref: 'definitions.yaml#/components/schemas/GeoData'
                '400':
                    description: 'Bad Request'
                '401':
                    description: 'Unauthenticated'
                '404':
                    description: 'No address found'
    /geo/autocomplete:
        get:
            summary: 'Autocomplete'
            description: 'Autocomplete a place query'
            tags:
                - geo
            parameters:
                - in: query
                  name: q
                  schema:
                      type: string
                  required: true
                  description: 'Query to attempt to autocomplete'
            responses:
                '200':
                    description: 'Returns autocomplete info (actually in json format)'
                    content:
                        text/plain:
                            schema:
                                type: array
                                items:
                                    $ref: 'definitions.yaml#/components/schemas/Place'
                '400':
                    description: 'Bad Request'
                '401':
                    description: 'Unauthenticated'
                '404':
                    description: 'No results found'

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: FBAuth

security:
    - bearerAuth: []
